rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // User rules
    match /users/{userId} {
      allow get: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId &&
        request.resource.data.keys().hasAll(['email', 'fullName', 'userType', 'phoneNumber', 'isOnline', 'lastSeen', 'createdAt']);
      allow update: if isUserAuthenticated(userId) && 
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['isOnline', 'lastSeen', 'fcmToken']) ||
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['fullName', 'phoneNumber', 'profileImage'])
        );
    }

    // Chat rules
    match /chats/{chatId} {
      // Allow creating new chats
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['participants', 'lastMessageTime', 'lastMessage']) &&
        request.resource.data.participants.hasAll([request.auth.uid]);
      
      // Allow reading chats where user is a participant
      allow get, list: if isAuthenticated();
      
      // Allow updating chats where user is a participant
      allow update: if isAuthenticated() && 
        (resource == null || request.auth.uid in resource.data.participants) &&
        request.resource.data.participants == resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        allow get, list: if isAuthenticated() &&
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        allow create: if isAuthenticated() &&
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;
        
        allow update: if isAuthenticated() &&
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) ||
           resource.data.senderId == request.auth.uid);
      }
    }

    // Appointments rules
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() &&
        (resource.data.farmerId == request.auth.uid ||
         resource.data.vetId == request.auth.uid);
      allow create: if isAuthenticated() &&
        request.resource.data.farmerId == request.auth.uid;
      allow update: if isAuthenticated() &&
        (resource.data.farmerId == request.auth.uid ||
         resource.data.vetId == request.auth.uid);
    }

    // Farmers collection
    match /farmers/{farmerId} {
      allow read, write: if isAuthenticated() && request.auth.uid == farmerId;
    }

    // Messages collection
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || 
         resource.data.senderId == request.auth.uid || 
         resource.data.receiverId == request.auth.uid);
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
  }
} 